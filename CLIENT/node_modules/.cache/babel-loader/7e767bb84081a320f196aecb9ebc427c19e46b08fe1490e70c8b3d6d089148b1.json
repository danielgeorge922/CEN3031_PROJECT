{"ast":null,"code":"var _jsxFileName = \"/Users/mahekbatra/Desktop/UF/UF classes/fall 2024/cen3031/CEN3031_PROJECT/CLIENT/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Homepage from './pages/Homepage';\nimport Mainpage from './pages/Mainpage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/main\",\n          element: /*#__PURE__*/_jsxDEV(Mainpage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\n\n/**\n * INSTRUCTIONS FOR BACKEND TEAM:\n * \n * 1. The \"Sign Up\" form is on the `Homepage` component.\n * 2. After the user fills out the sign-up form and clicks the \"Sign Up\" button, make an API request to the part of the DB where we are storing all the user login info.\n * \n * BACKEND FUNCTIONALITY REQUIREMENTS:\n * \n * 1. **Check if Email Exists in the Database**:\n *    - When the user submits their information (first name, last name, email, password), the backend should:\n *      a. Query the database to check if the provided email address already exists.\n *      b. If the email already exists in the database, return an error response to the frontend.\n *         Example Error Message: \"Email already registered. Please use a different email.\"\n * \n * 2. **Insert New User Information into the Database**:\n *    - If the email does NOT exist, the backend should:\n *      a. Hash the user's password for security (never store plain text passwords).\n *      b. Insert the new user record into the database with the following fields:\n *          - First Name\n *          - Last Name\n *          - Email (unique identifier)\n *          - Hashed Password\n *      c. Send a success response back to the frontend indicating that the sign-up was successful.\n * \n * 3. **Handle Error Cases**:\n *    - If the database query fails for any reason (e.g., connection issues, invalid data), send a failure response to the frontend.\n *    - Ensure that meaningful error messages are sent back in case of failures so the frontend can display the appropriate feedback to the user.\n * \n * Example Workflow (for reference):\n * \n *    - Frontend sends a POST request with user data to `/api/signup`.\n *    - Backend checks if the email exists.\n *        - If yes, respond with 400 status code and a message like \"Email already registered.\"\n *        - If no, hash the password, store the user in the database, and respond with 200 status code and success message.\n * \n * 4. **API Endpoints**:\n *    - The API endpoint for sign-up could look something like this: `POST /api/signup`.\n *    - The frontend will expect JSON responses for both success and failure.\n * \n * 5. **Backend Functionality for the Question Cards (`QuestionCard` and `QuestionCardModal`)**:\n *    - The `QuestionCard` component displays the question title, class name, answers, and allows upvoting/downvoting.\n *    - The `QuestionCardModal` component opens when the question title is clicked and shows more details about the question.\n * \n * 6. **Database for Questions**:\n *    - Ensure there is a table in the database to store questions with the following fields:\n *      a. `id` (unique identifier)\n *      b. `text` (the question itself)\n *      c. `className` (the class associated with the question, e.g., Math 101)\n *      d. `answers` (number of answers the question has received)\n *      e. `profilePic` (URL for the userâ€™s profile picture)\n *      f. `upvotes` (number of upvotes the question has received)\n *      g. `downvotes` (number of downvotes the question has received)\n * \n * 7. **API Endpoints for Questions**:\n *    - Create the following endpoints to manage questions:\n *    \n *    a. **POST /api/questions**: \n *        - This endpoint is used to add a new question to the database.\n *        - The frontend will send the `text`, `className`, and other necessary information when a new question is added.\n *        - Example data payload:\n *          ```\n *          {\n *            \"text\": \"How do you solve this equation in Math 101?\",\n *            \"className\": \"Math 101\",\n *            \"profilePic\": \"https://link-to-profile-pic.com\",\n *            \"answers\": 0\n *          }\n *          ```\n *        - On success, return a 200 response with the created question's details.\n *    \n *    b. **GET /api/questions**:\n *        - This endpoint will fetch all the questions from the database to be displayed in the `QuestionCard` component.\n *        - Example response:\n *          ```\n *          [\n *            {\n *              \"id\": 1,\n *              \"text\": \"How do you solve this equation in Math 101?\",\n *              \"className\": \"Math 101\",\n *              \"answers\": 3,\n *              \"profilePic\": \"https://link-to-profile-pic.com\",\n *              \"upvotes\": 10,\n *              \"downvotes\": 2\n *            },\n *            ...\n *          ]\n *          ```\n *    \n *    c. **PUT /api/questions/:id/upvote**:\n *        - This endpoint will handle upvoting a question.\n *        - When the user clicks the upvote button, send a PUT request to this endpoint with the question's `id`.\n *        - The backend should increment the `upvotes` count for the question in the database.\n *        - Example response:\n *          ```\n *          {\n *            \"message\": \"Question upvoted successfully\",\n *            \"upvotes\": 11\n *          }\n *          ```\n *    \n *    d. **PUT /api/questions/:id/downvote**:\n *        - This endpoint will handle downvoting a question.\n *        - When the user clicks the downvote button, send a PUT request to this endpoint with the question's `id`.\n *        - The backend should increment the `downvotes` count for the question in the database.\n *        - Example response:\n *          ```\n *          {\n *            \"message\": \"Question downvoted successfully\",\n *            \"downvotes\": 3\n *          }\n *          ```\n *    \n *    e. **GET /api/questions/:id**:\n *        - This endpoint fetches the details of a specific question (for the `QuestionCardModal`).\n *        - When the user clicks the question title, the frontend will send a GET request to this endpoint with the question's `id`.\n *        - The backend should return the full details of the question, including additional information if available.\n *        - Example response:\n *          ```\n *          {\n *            \"id\": 1,\n *            \"text\": \"How do you solve this equation in Math 101?\",\n *            \"className\": \"Math 101\",\n *            \"answers\": [\n *              \"Answer 1\",\n *              \"Answer 2\"\n *            ],\n *            \"upvotes\": 10,\n *            \"downvotes\": 2,\n *            \"profilePic\": \"https://link-to-profile-pic.com\"\n *          }\n *          ```\n * \n * 8. **Error Handling for Question Endpoints**:\n *    - If the database query fails for any reason or if the question `id` is not found, return an appropriate error message and status code (e.g., 404 for \"Question not found\").\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navbar","Homepage","Mainpage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mahekbatra/Desktop/UF/UF classes/fall 2024/cen3031/CEN3031_PROJECT/CLIENT/src/App.js"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Homepage from './pages/Homepage';\nimport Mainpage from './pages/Mainpage';\n\nfunction App() {\n  return (\n    <>\n      <Router> {/* If you want a navigation bar across pages */}\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route path=\"/main\" element={<Mainpage />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n\n/**\n * INSTRUCTIONS FOR BACKEND TEAM:\n * \n * 1. The \"Sign Up\" form is on the `Homepage` component.\n * 2. After the user fills out the sign-up form and clicks the \"Sign Up\" button, make an API request to the part of the DB where we are storing all the user login info.\n * \n * BACKEND FUNCTIONALITY REQUIREMENTS:\n * \n * 1. **Check if Email Exists in the Database**:\n *    - When the user submits their information (first name, last name, email, password), the backend should:\n *      a. Query the database to check if the provided email address already exists.\n *      b. If the email already exists in the database, return an error response to the frontend.\n *         Example Error Message: \"Email already registered. Please use a different email.\"\n * \n * 2. **Insert New User Information into the Database**:\n *    - If the email does NOT exist, the backend should:\n *      a. Hash the user's password for security (never store plain text passwords).\n *      b. Insert the new user record into the database with the following fields:\n *          - First Name\n *          - Last Name\n *          - Email (unique identifier)\n *          - Hashed Password\n *      c. Send a success response back to the frontend indicating that the sign-up was successful.\n * \n * 3. **Handle Error Cases**:\n *    - If the database query fails for any reason (e.g., connection issues, invalid data), send a failure response to the frontend.\n *    - Ensure that meaningful error messages are sent back in case of failures so the frontend can display the appropriate feedback to the user.\n * \n * Example Workflow (for reference):\n * \n *    - Frontend sends a POST request with user data to `/api/signup`.\n *    - Backend checks if the email exists.\n *        - If yes, respond with 400 status code and a message like \"Email already registered.\"\n *        - If no, hash the password, store the user in the database, and respond with 200 status code and success message.\n * \n * 4. **API Endpoints**:\n *    - The API endpoint for sign-up could look something like this: `POST /api/signup`.\n *    - The frontend will expect JSON responses for both success and failure.\n * \n * 5. **Backend Functionality for the Question Cards (`QuestionCard` and `QuestionCardModal`)**:\n *    - The `QuestionCard` component displays the question title, class name, answers, and allows upvoting/downvoting.\n *    - The `QuestionCardModal` component opens when the question title is clicked and shows more details about the question.\n * \n * 6. **Database for Questions**:\n *    - Ensure there is a table in the database to store questions with the following fields:\n *      a. `id` (unique identifier)\n *      b. `text` (the question itself)\n *      c. `className` (the class associated with the question, e.g., Math 101)\n *      d. `answers` (number of answers the question has received)\n *      e. `profilePic` (URL for the userâ€™s profile picture)\n *      f. `upvotes` (number of upvotes the question has received)\n *      g. `downvotes` (number of downvotes the question has received)\n * \n * 7. **API Endpoints for Questions**:\n *    - Create the following endpoints to manage questions:\n *    \n *    a. **POST /api/questions**: \n *        - This endpoint is used to add a new question to the database.\n *        - The frontend will send the `text`, `className`, and other necessary information when a new question is added.\n *        - Example data payload:\n *          ```\n *          {\n *            \"text\": \"How do you solve this equation in Math 101?\",\n *            \"className\": \"Math 101\",\n *            \"profilePic\": \"https://link-to-profile-pic.com\",\n *            \"answers\": 0\n *          }\n *          ```\n *        - On success, return a 200 response with the created question's details.\n *    \n *    b. **GET /api/questions**:\n *        - This endpoint will fetch all the questions from the database to be displayed in the `QuestionCard` component.\n *        - Example response:\n *          ```\n *          [\n *            {\n *              \"id\": 1,\n *              \"text\": \"How do you solve this equation in Math 101?\",\n *              \"className\": \"Math 101\",\n *              \"answers\": 3,\n *              \"profilePic\": \"https://link-to-profile-pic.com\",\n *              \"upvotes\": 10,\n *              \"downvotes\": 2\n *            },\n *            ...\n *          ]\n *          ```\n *    \n *    c. **PUT /api/questions/:id/upvote**:\n *        - This endpoint will handle upvoting a question.\n *        - When the user clicks the upvote button, send a PUT request to this endpoint with the question's `id`.\n *        - The backend should increment the `upvotes` count for the question in the database.\n *        - Example response:\n *          ```\n *          {\n *            \"message\": \"Question upvoted successfully\",\n *            \"upvotes\": 11\n *          }\n *          ```\n *    \n *    d. **PUT /api/questions/:id/downvote**:\n *        - This endpoint will handle downvoting a question.\n *        - When the user clicks the downvote button, send a PUT request to this endpoint with the question's `id`.\n *        - The backend should increment the `downvotes` count for the question in the database.\n *        - Example response:\n *          ```\n *          {\n *            \"message\": \"Question downvoted successfully\",\n *            \"downvotes\": 3\n *          }\n *          ```\n *    \n *    e. **GET /api/questions/:id**:\n *        - This endpoint fetches the details of a specific question (for the `QuestionCardModal`).\n *        - When the user clicks the question title, the frontend will send a GET request to this endpoint with the question's `id`.\n *        - The backend should return the full details of the question, including additional information if available.\n *        - Example response:\n *          ```\n *          {\n *            \"id\": 1,\n *            \"text\": \"How do you solve this equation in Math 101?\",\n *            \"className\": \"Math 101\",\n *            \"answers\": [\n *              \"Answer 1\",\n *              \"Answer 2\"\n *            ],\n *            \"upvotes\": 10,\n *            \"downvotes\": 2,\n *            \"profilePic\": \"https://link-to-profile-pic.com\"\n *          }\n *          ```\n * \n * 8. **Error Handling for Question Endpoints**:\n *    - If the database query fails for any reason or if the question `id` is not found, return an appropriate error message and status code (e.g., 404 for \"Question not found\").\n */"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA,CAACP,MAAM;MAAAW,QAAA,GAAC,GAAC,eACPJ,OAAA,CAACN,MAAM;QAAAU,QAAA,gBACLJ,OAAA,CAACL,KAAK;UAACU,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEN,OAAA,CAACH,QAAQ;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzCV,OAAA,CAACL,KAAK;UAACU,IAAI,EAAC,OAAO;UAACC,OAAO,eAAEN,OAAA,CAACF,QAAQ;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACT,CAAC;AAEP;AAACC,EAAA,GAXQR,GAAG;AAaZ,eAAeA,GAAG;;AAEltIA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}